import { ObjectId } from 'mongodb';
import { Request, Response } from 'express';
import { joiValidation } from '@global/decorators/joi-validation.decorators';
import { signupSchema } from '@auth/schemes/signup';
import { IAuthDocument, ISignUpData } from '@auth/interfaces/auth.interface';
import { authService } from '@services/db/auth.service';
import { BadRequestError } from '@global/helpers/error-handler';
import { Helpers } from '@global/helpers/helpers';
import { UploadApiResponse } from 'cloudinary';
import { uploads } from '@global/helpers/cloudinary-upload';
import HTTP_STATUS from 'http-status-codes';

export class SignUp{
    @joiValidation(signupSchema)
    public async create(req: Request, res: Response) : Promise<void>{
        const{ username, email, password, avatarColor, avatarImage } = req.body;
        // console.log('BODY', req.body);
        const userIsExist: IAuthDocument = await authService.getUserByUsernameOrEmail(username, email);
        if(userIsExist){
            throw new BadRequestError('invalid Credentials');
        }
           //create objectID which allow that _ID generated by mongoDb to be saved in DB and Redis
    const authObjectId: ObjectId = new ObjectId();
    const userObjectId: ObjectId = new ObjectId();
    const uId = `${Helpers.generateRandomInteger(12)}`;
    const authData: IAuthDocument = SignUp.prototype.signupData({
        _id: authObjectId,
        uId,
        username,
        password,
        email,
        avatarColor
    });
    const result: UploadApiResponse = await uploads(avatarImage, `${userObjectId}`, true, true) as UploadApiResponse;

    if(!result?.public_id)
    { //checker any upload error by checking public id
        throw new BadRequestError('File upload: invalid credentials, try again');
    }
    res.status(HTTP_STATUS.CREATED).json({message: 'user created!!', authData});
    }

    private signupData(data: ISignUpData): IAuthDocument {
        const {_id, username, email, uId, password, avatarColor} = data;
        return{
            _id,
            uId,
            password,
            username: Helpers.firstLetterUppercase(username),
            email: Helpers.lowerCase(email),
            avatarColor,
            createdAt: new Date()
        } as IAuthDocument;
    }

}
